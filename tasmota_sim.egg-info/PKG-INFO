Metadata-Version: 2.4
Name: tasmota-sim
Version: 1.0.0
Summary: A comprehensive Tasmota smart device simulator with RabbitMQ messaging
Home-page: https://github.com/your-repo/tasmota-sim
Author: Tasmota Simulator
Author-email: 
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: aio-pika>=9.4.0
Requires-Dist: click>=8.1.7
Requires-Dist: pydantic>=2.5.0
Requires-Dist: fastapi>=0.104.1
Requires-Dist: uvicorn>=0.24.0
Requires-Dist: asyncio-mqtt>=0.13.0
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: colorama>=0.4.6
Requires-Dist: rich>=13.7.0
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: setuptools>=69.0.3
Dynamic: author
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# Tasmota Smart Plug Simulator

Ein umfassendes Simulationssystem für Tasmota Smart Plugs mit RabbitMQ-Messaging, Web-Server und Docker-Hosting.

## 🚀 Schnellstart

### Option 1: Web-Server + Direkte IP-Steuerung (Neu & Empfohlen)

**Schritt 1: Devices erstellen & IP-Aliase einrichten**
```bash
# CLI installieren (falls noch nicht geschehen)
pip install -e .

# Devices erstellen mit automatischen IP-Aliases
tasmota-sim create-devices --count 3 --setup-ip-aliases
```

**Schritt 2: Container starten**
```bash
# Alle Services inkl. Web-Server starten
docker-compose up -d
```

**Schritt 3: Devices testen**
```bash
# Über direkte IP-Adressen (wie echte Tasmota-Devices!)
curl http://172.25.0.100  # Device 1 Status
curl http://172.25.0.101  # Device 2 Status  
curl http://172.25.0.102  # Device 3 Status

# Oder über localhost-Ports
curl http://localhost:8081  # Device 1
curl http://localhost:8082  # Device 2
curl http://localhost:8083  # Device 3

# Tasmota-Commands senden
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20ON"
curl -u admin:test1234! "http://172.25.0.101/cm?cmnd=Power%20OFF"
curl -u admin:test1234! "http://172.25.0.102/cm?cmnd=Power%20TOGGLE"
```

**Schritt 4: Web-Interface nutzen**
```bash
# FastAPI Swagger-Dokumentation
open http://localhost:8081/docs  # Device 1 API-Docs
open http://localhost:8082/docs  # Device 2 API-Docs
open http://localhost:8083/docs  # Device 3 API-Docs

# Oder direkt über IP
open http://172.25.0.100/docs
```

### Option 2: Lokale CLI + Docker Services

**Schritt 1: Lokale CLI Installation**
```bash
# Windows
install-local.bat

# Linux/macOS
./install-local.sh

# Oder manuell
pip install -e .
```

**Schritt 2: Docker Services starten**
```bash
# Nur RabbitMQ und Device-Container (ohne CLI-Container)
docker-compose -f docker-compose.services.yml up -d
docker-compose -f docker-compose.override.yml up -d
```

**Schritt 3: CLI lokal verwenden**
```bash
# Hilfe anzeigen
tasmota-sim --help

# Geräte erstellen
tasmota-sim create-devices --count 5

# Gerätestatus abfragen
tasmota-sim status kitchen_001

# Gerät ein-/ausschalten
tasmota-sim power kitchen_001 on
tasmota-sim power kitchen_001 off

# Energiedaten abfragen
tasmota-sim energy kitchen_001
```

## 🌐 Web-Server Features

### 🎯 Verfügbare Endpunkte

| Endpunkt | Beschreibung | Authentifizierung |
|----------|--------------|-------------------|
| `GET /` | Device-Status und Infos | Keine |
| `GET /cm?cmnd=<command>` | Tasmota-Commands | Basic Auth |
| `GET /docs` | FastAPI Swagger-UI | Keine |
| `GET /openapi.json` | OpenAPI-Schema | Keine |

### 🔐 Authentifizierung

**Standard-Zugangsdaten:**
- **Benutzer**: `admin`
- **Passwort**: `test1234!`

**Beispiele:**
```bash
# Ohne Auth - Status abfragen
curl http://172.25.0.100

# Mit Auth - Commands senden
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20ON"
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20OFF"
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20TOGGLE"
```

### 🏠 Device-Zugriff

**Drei Zugriffsmethoden verfügbar:**

1. **Direkte IP-Adressen** (Realistisch, wie echte Tasmota-Devices):
   - `http://172.25.0.100` → kitchen_001
   - `http://172.25.0.101` → kitchen_002  
   - `http://172.25.0.102` → kitchen_003

2. **Localhost-Ports** (Entwicklerfreundlich):
   - `http://localhost:8081` → kitchen_001
   - `http://localhost:8082` → kitchen_002
   - `http://localhost:8083` → kitchen_003

3. **Container-zu-Container** (Automatisch im Docker-Netzwerk)

## 🏗️ Architektur

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Web Browser   │    │   RabbitMQ      │    │ Device Container│
│   HTTP Client   │◄──►│   (Docker)      │◄──►│ + Web Server    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
        │                        │                        │
        │                        │                        │
   ┌────▼────┐              ┌────▼────┐              ┌────▼────┐
   │FastAPI  │              │Message  │              │Telemetry│
   │Commands │              │ Broker  │              │Status   │
   └─────────┘              └─────────┘              └─────────┘

┌─────────────────┐    ┌─────────────────┐
│   Lokale CLI    │    │   Setup Scripts │
│   (Optional)    │    │   IP-Aliase     │
└─────────────────┘    └─────────────────┘
```

## 📋 Verfügbare CLI-Befehle

| Befehl | Beschreibung | Beispiel |
|--------|--------------|----------|
| `create-devices` | Erstellt Device-Container (mit IP-Alias Option) | `tasmota-sim create-devices --count 3 --setup-ip-aliases` |
| `setup-ip-aliases` | Erstellt IP-Aliase für direkten Zugriff | `tasmota-sim setup-ip-aliases --count 3` |
| `remove-ip-aliases` | Entfernt IP-Aliase | `tasmota-sim remove-ip-aliases --count 3` |
| `status` | Fragt Gerätestatus ab | `tasmota-sim status kitchen_001` |
| `power` | Schaltet Gerät ein/aus | `tasmota-sim power kitchen_001 on` |
| `energy` | Fragt Energiedaten ab | `tasmota-sim energy kitchen_001` |
| `monitor` | Echzeit-Monitoring* | `tasmota-sim monitor` |
| `docker-up` | Startet Docker Services | `tasmota-sim docker-up` |
| `docker-down` | Stoppt Docker Services | `tasmota-sim docker-down` |
| `docker-restart` | Startet Services neu | `tasmota-sim docker-restart --all` |
| `docker-logs` | Zeigt Service-Logs | `tasmota-sim docker-logs rabbitmq -f` |
| `docker-clean` | Bereinigt Docker-Ressourcen | `tasmota-sim docker-clean` |
| `docker-status` | Zeigt Container-Status | `tasmota-sim docker-status` |
| `list-devices` | Listet Device-Container | `tasmota-sim list-devices --status` |

*Monitoring-Feature wird noch implementiert

## 🔧 Setup & Konfiguration

### IP-Aliase Setup (Für direkte IP-Zugriffe)

```bash
# IP-Aliase erstellen (einmalig pro Shell-Session)
./setup-ip-aliases.sh

# IP-Aliase entfernen (optional)
./remove-ip-aliases.sh
```

### Umgebungsvariablen

```bash
# Lokale CLI-Nutzung (Standard)
export RABBITMQ_HOST=localhost
export RABBITMQ_USER=admin
export RABBITMQ_PASS=admin123

# Docker-interne Nutzung
export RABBITMQ_HOST=172.25.0.10
export RABBITMQ_USER=admin
export RABBITMQ_PASS=admin123

# Web-Server Konfiguration
export DEFAULT_USERNAME=admin
export DEFAULT_PASSWORD=test1234!
```

### RabbitMQ Management UI

- **URL**: http://localhost:15672
- **Benutzer**: admin
- **Passwort**: admin123

## 🌐 Netzwerk-Konfiguration

### Standard-Konfiguration
- **RabbitMQ**: `172.25.0.10:5672` (intern), `localhost:5672` (extern)
- **Device IPs**: `172.25.0.100`, `172.25.0.101`, `172.25.0.102`
- **Web-Server Ports**: `8081`, `8082`, `8083` (extern)
- **Subnet**: `172.25.0.0/16`

### Port-Mapping
| Container | Interne IP | Externe Ports | Web-Interface |
|-----------|------------|---------------|---------------|
| kitchen_001 | 172.25.0.100 | 8081→80 | http://localhost:8081 |
| kitchen_002 | 172.25.0.101 | 8082→80 | http://localhost:8082 |
| kitchen_003 | 172.25.0.102 | 8083→80 | http://localhost:8083 |
| rabbitmq | 172.25.0.10 | 5672, 15672 | http://localhost:15672 |

## 💡 Nutzungsbeispiele

### Web-Server Setup

```bash
# 1. IP-Aliase einrichten
./setup-ip-aliases.sh

# 2. Container starten
docker-compose up -d

# 3. Devices über Web-Interface testen
curl http://172.25.0.100
curl http://172.25.0.101  
curl http://172.25.0.102

# 4. Tasmota-Commands senden
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20ON"
curl -u admin:test1234! "http://172.25.0.101/cm?cmnd=Power%20OFF"

# 5. API-Dokumentation öffnen
open http://172.25.0.100/docs
```

### CLI-basierte Nutzung

```bash
# 1. CLI installieren
pip install -e .

# 2. Geräte erstellen (mit automatischen IP-Aliases)
tasmota-sim create-devices --count 3 --setup-ip-aliases

# 3. Services starten
docker-compose up -d

# 4. Geräte testen
tasmota-sim status kitchen_001

# Oder IP-Aliases manuell verwalten:
tasmota-sim setup-ip-aliases --count 3     # Erstellen
tasmota-sim remove-ip-aliases --count 3    # Entfernen
```

### Erweiterte Web-Server-Nutzung

```bash
# Alle Devices gleichzeitig steuern
for ip in 172.25.0.100 172.25.0.101 172.25.0.102; do
    curl -u admin:test1234! "http://$ip/cm?cmnd=Power%20ON"
done

# Status aller Devices abfragen
for ip in 172.25.0.100 172.25.0.101 172.25.0.102; do
    echo "Device $ip:"
    curl http://$ip | jq
done

# Container-Management
docker-compose logs -f tasmota-device-1  # Logs verfolgen
docker-compose restart tasmota-device-2  # Einzelnen Container neu starten
docker-compose down && docker-compose up -d  # Alle Container neu starten
```

## 📊 Features

### ✅ Implementiert
- **🌐 FastAPI Web-Server** mit Swagger-UI für jedes Device
- **🏠 Direkte IP-Steuerung** wie echte Tasmota-Devices
- **🔐 HTTP Basic Authentication** für Tasmota-Commands
- **📡 Realistische Device-Simulation** (15-85W Verbrauch)
- **🐰 RabbitMQ Topic-Messaging** mit persistenten Nachrichten
- **🖥️ Individuelle Container-IPs** für jedes Gerät
- **⚡ Asynchrone aio-pika & uvicorn** für hohe Performance
- **🔧 Setup-Scripts** für automatische IP-Alias-Konfiguration
- **📊 Health Checks** für RabbitMQ und Web-Server

### 🔄 In Entwicklung
- **📈 Echzeit-Monitoring Dashboard** mit Rich-UI
- **🎛️ Web-basiertes Dashboard** für Device-Management
- **🌡️ Erweiterte Telemetrie** (Temperatur, Feuchtigkeit)
- **👥 Device-Gruppen** und Szenarien
- **🔄 WebSocket-Support** für Realtime-Updates

## 🐛 Troubleshooting

### Häufige Probleme

**Web-Server nicht erreichbar**
```bash
# Container-Status prüfen
docker-compose ps

# Logs anzeigen
docker-compose logs tasmota-device-1

# IP-Aliase prüfen
ifconfig lo0 | grep 172.25
```

**"Can't assign requested address" Fehler**
```bash
# IP-Aliase müssen vor Container-Start erstellt werden
docker-compose down
./setup-ip-aliases.sh
docker-compose up -d
```

**Authentifizierung fehlschlägt**
```bash
# Korrekte Zugangsdaten verwenden
curl -u admin:test1234! "http://172.25.0.100/cm?cmnd=Power%20ON"

# Base64-Encoding manuell (alternativ)
echo -n "admin:test1234!" | base64
curl -H "Authorization: Basic YWRtaW46dGVzdDEyMzQh" "http://172.25.0.100/cm?cmnd=Power%20ON"
```

**CLI-Befehle funktionieren nicht**
```bash
# Prüfen ob CLI installiert ist
tasmota-sim --help

# Falls nicht, neu installieren
pip install -e .
```

**Verbindung zu RabbitMQ fehlschlägt**
```bash
# RabbitMQ Status prüfen
docker-compose ps rabbitmq

# RabbitMQ neu starten
docker-compose restart rabbitmq
```

**IP-Aliase funktionieren nicht**
```bash
# Aliase prüfen
ifconfig lo0 | grep 172.25

# Aliase neu erstellen
./remove-ip-aliases.sh
./setup-ip-aliases.sh

# macOS: Manchmal Neustart erforderlich
sudo dscacheutil -flushcache
```

## 📦 Installation Details

### Voraussetzungen
- **Python 3.8+**
- **Docker & Docker Compose**
- **Git** (für Entwicklung)
- **Admin-Rechte** (für IP-Alias-Setup)

### Abhängigkeiten
- `fastapi>=0.104.0` - Web-Framework
- `uvicorn>=0.24.0` - ASGI Server
- `aio-pika>=9.4.0` - Asynchrones RabbitMQ
- `click>=8.1.7` - CLI Framework
- `pydantic>=2.5.0` - Datenvalidierung
- `rich>=13.7.0` - Terminal-UI
- `pyyaml>=6.0.1` - YAML-Konfiguration

### Setup-Scripts
- `setup-ip-aliases.sh` - Erstellt IP-Aliase für direkte Device-Zugriffe
- `remove-ip-aliases.sh` - Entfernt IP-Aliase
- `install-local.sh` / `install-local.bat` - CLI-Installation

## 🔗 Verweise

- **RabbitMQ Dokumentation**: https://www.rabbitmq.com/documentation.html
- **Tasmota Projekt**: https://tasmota.github.io/docs/
- **FastAPI Dokumentation**: https://fastapi.tiangolo.com/
- **Docker Compose**: https://docs.docker.com/compose/

---

**💡 Tipp**: Nutzen Sie die Web-Server-Funktionalität für realistische Tasmota-Device-Simulation oder die lokale CLI für Bulk-Operationen und Entwicklung! 
